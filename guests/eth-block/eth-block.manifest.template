# Copy to eth-block/target/debug and run:
#   gramine-manifest -Dlog_level=error -Darch_libdir=/lib/x86_64-linux-gnu/ eth-block.manifest.template eth-block.manifest
#   gramine-sgx-sign --manifest eth-block.manifest --output eth-block.manifest.sgx
#   gramine-sgx ./eth-block

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "/eth-block"
loader.log_level = "{{ log_level }}"
loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"
loader.env.RUST_LOG = "info"

fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "/eth-block", uri = "file:eth-block" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/usr/lib/ssl/certs/", uri = "file:/usr/lib/ssl/certs/" },
  { path = "/tmp", uri = "file:/tmp" },
]
sys.insecure__allow_eventfd = true
loader.insecure__use_cmdline_argv = true

sgx.debug = false
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:eth-block",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/libgcc_s.so.1",
  "file:{{ arch_libdir }}/libssl.so.3",
  "file:{{ arch_libdir }}/libcrypto.so.3",
  "file:/usr/lib/ssl/certs/",
]
sgx.max_threads = 16
sys.enable_extra_runtime_domain_names_conf = true
sgx.remote_attestation = "dcap"

sgx.allowed_files = [
  "file:/tmp",
]
